AWSTemplateFormatVersion: "2010-09-09"
Description: Monitoring Account - 2 VPCs, 6 Subnets, 6 Windows EC2 Instances, 3 SGs, Datadog Agent Setup

Parameters:
  Vpc1CIDR:
    Type: String
    Description: CIDR block for VPC1 (e.g., 10.0.0.0/22)
  Vpc2CIDR:
    Type: String
    Description: CIDR block for VPC2 (e.g., 10.0.4.0/22)

  Subnet1CIDR:
    Type: String
    Description: CIDR block for Private Subnet 1 in VPC1
  Subnet2CIDR:
    Type: String
    Description: CIDR block for Private Subnet 2 in VPC1
  Subnet3CIDR:
    Type: String
    Description: CIDR block for Private Subnet 3 in VPC1

  Subnet4CIDR:
    Type: String
    Description: CIDR block for Private Subnet 1 in VPC2
  Subnet5CIDR:
    Type: String
    Description: CIDR block for Private Subnet 2 in VPC2
  Subnet6CIDR:
    Type: String
    Description: CIDR block for Private Subnet 3 in VPC2

  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.medium, t3.large, t3.xlarge]
    Description: EC2 Instance Type

  AMIId:
    Type: AWS::EC2::Image::Id
    Description: Windows AMI ID for EC2 instances

  DatadogAPIKey:
    Type: String
    NoEcho: true
    Description: Datadog API Key

Resources:

  # VPC1 & VPC2
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: Monitoring-VPC1 }]

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc2CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: Monitoring-VPC2 }]

  # Subnets for VPC1
  Subnet1: { Type: AWS::EC2::Subnet, Properties: { VpcId: !Ref VPC1, CidrBlock: !Ref Subnet1CIDR, AvailabilityZone: !Select [0, !GetAZs ""] } }
  Subnet2: { Type: AWS::EC2::Subnet, Properties: { VpcId: !Ref VPC1, CidrBlock: !Ref Subnet2CIDR, AvailabilityZone: !Select [1, !GetAZs ""] } }
  Subnet3: { Type: AWS::EC2::Subnet, Properties: { VpcId: !Ref VPC1, CidrBlock: !Ref Subnet3CIDR, AvailabilityZone: !Select [2, !GetAZs ""] } }

  # Subnets for VPC2
  Subnet4: { Type: AWS::EC2::Subnet, Properties: { VpcId: !Ref VPC2, CidrBlock: !Ref Subnet4CIDR, AvailabilityZone: !Select [0, !GetAZs ""] } }
  Subnet5: { Type: AWS::EC2::Subnet, Properties: { VpcId: !Ref VPC2, CidrBlock: !Ref Subnet5CIDR, AvailabilityZone: !Select [1, !GetAZs ""] } }
  Subnet6: { Type: AWS::EC2::Subnet, Properties: { VpcId: !Ref VPC2, CidrBlock: !Ref Subnet6CIDR, AvailabilityZone: !Select [2, !GetAZs ""] } }

  # Security Groups
  SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG1 - For EC2 in VPC1
      VpcId: !Ref VPC1
      Tags: [{ Key: Name, Value: Monitoring-SG1 }]
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  SG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG2 - For EC2 in VPC1
      VpcId: !Ref VPC1
      Tags: [{ Key: Name, Value: Monitoring-SG2 }]
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  SG3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG3 - For EC2 in VPC2
      VpcId: !Ref VPC2
      Tags: [{ Key: Name, Value: Monitoring-SG3 }]
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  # IAM Role for EC2 Instances
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2MonitoringPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:SendCommand"
                  - "ec2:DescribeInstances"
                Resource: "*"

  # IAM Instance Profile for EC2 Instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2Role

  # Windows EC2 Instances in VPC1
  Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_install_datadog:
              command: !Sub >
                powershell.exe -Command "Start-Process -Wait msiexec -ArgumentList '/qn /i \"https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi\" APIKEY=\"${DatadogAPIKey}\" SITE=\"datadoghq.com\"'"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SubnetId: !Ref Subnet1
      SecurityGroupIds: [!Ref SG1]
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags: [{ Key: Name, Value: Monitoring-EC2-01 }]
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v --stack ${AWS::StackName} --resource Instance1 --region ${AWS::Region}
          </script>

  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SubnetId: !Ref Subnet2
      SecurityGroupIds: [!Ref SG2]
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags: [{ Key: Name, Value: Monitoring-EC2-02 }]

  Instance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SubnetId: !Ref Subnet3
      SecurityGroupIds: [!Ref SG2]
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags: [{ Key: Name, Value: Monitoring-EC2-03 }]

  # Windows EC2 Instances in VPC2
  Instance4:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SubnetId: !Ref Subnet4
      SecurityGroupIds: [!Ref SG3]
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags: [{ Key: Name, Value: Monitoring-EC2-04 }]

  Instance5:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SubnetId: !Ref Subnet5
      SecurityGroupIds: [!Ref SG3]
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags: [{ Key: Name, Value: Monitoring-EC2-05 }]

  Instance6:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SubnetId: !Ref Subnet6
      SecurityGroupIds: [!Ref SG3]
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags: [{ Key: Name, Value: Monitoring-EC2-06 }]

  # SSM Document to automate tasks (e.g., Datadog agent installation)
  DatadogSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: "Install Datadog Agent on EC2 instances"
        mainSteps:
          - action: "aws:runPowerShellScript"
            name: "runShellScript"
            inputs:
              runCommand:
                - !Sub |
                    powershell.exe -Command "Start-Process -Wait msiexec -ArgumentList '/qn /i \"https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi\" APIKEY=\"${DatadogAPIKey}\" SITE=\"datadoghq.com\"'"

Outputs:

  VPC1ID:
    Description: "VPC1 ID"
    Value: !Ref VPC1

  VPC2ID:
    Description: "VPC2 ID"
    Value: !Ref VPC2

  EC2Instance1ID:
    Description: "Instance 1 ID"
    Value: !Ref Instance1

  EC2Instance2ID:
    Description: "Instance 2 ID"
    Value: !Ref Instance2

  EC2Instance3ID:
    Description: "Instance 3 ID"
    Value: !Ref Instance3

  EC2Instance4ID:
    Description: "Instance 4 ID"
    Value: !Ref Instance4

  EC2Instance5ID:
    Description: "Instance 5 ID"
    Value: !Ref Instance5

  EC2Instance6ID:
    Description: "Instance 6 ID"
    Value: !Ref Instance6