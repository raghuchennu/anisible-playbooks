AWSTemplateFormatVersion: '2010-09-09'
Description: Tesco IMS Prod - Fully Parameterized AD and Exchange VPCs with Private Subnets and EC2 Instances

Parameters:
  ADVpcCIDR:
    Type: String
    Default: 10.0.48.0/22
    Description: CIDR block for Active Directory VPC

  ExchangeVpcCIDR:
    Type: String
    Default: 10.0.52.0/22
    Description: CIDR block for Exchange Services VPC

  ADSubnet1CIDR:
    Type: String
    Default: 10.0.48.0/25
  ADSubnet2CIDR:
    Type: String
    Default: 10.0.48.128/25
  ADSubnet3CIDR:
    Type: String
    Default: 10.0.49.0/24

  ExSubnet1CIDR:
    Type: String
    Default: 10.0.52.0/25
  ExSubnet2CIDR:
    Type: String
    Default: 10.0.52.128/25
  ExSubnet3CIDR:
    Type: String
    Default: 10.0.53.0/24

  InstanceType:
    Type: String
    Default: r5.large
    Description: EC2 instance type for all instances

  WindowsAmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for Windows Server 2022

Resources:

  # VPCs
  ADVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ADVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: Tesco-IMS-Prod-AD-VPC }]

  ExchangeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ExchangeVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: Tesco-IMS-Prod-Exchange-VPC }]

  # AD Subnets
  ADSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ADVPC
      CidrBlock: !Ref ADSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: IMS-Prod-AD-PrivateSubnet-01 }]

  ADSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ADVPC
      CidrBlock: !Ref ADSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: IMS-Prod-AD-PrivateSubnet-02 }]

  ADSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ADVPC
      CidrBlock: !Ref ADSubnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: IMS-Prod-AD-PrivateSubnet-03 }]

  # Exchange Subnets
  ExchangeSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExchangeVPC
      CidrBlock: !Ref ExSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: IMS-Prod-Exchange-PrivateSubnet-01 }]

  ExchangeSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExchangeVPC
      CidrBlock: !Ref ExSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: IMS-Prod-Exchange-PrivateSubnet-02 }]

  ExchangeSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExchangeVPC
      CidrBlock: !Ref ExSubnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: IMS-Prod-Exchange-PrivateSubnet-03 }]

  # Private Route Table for AD VPC
  ADRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ADVPC
      Tags: [{ Key: Name, Value: AD-Private-RouteTable }]

  ADSubnet1Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ADRouteTable
      SubnetId: !Ref ADSubnet1

  ADSubnet2Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ADRouteTable
      SubnetId: !Ref ADSubnet2

  ADSubnet3Route:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ADRouteTable
      SubnetId: !Ref ADSubnet3

  # Security Group
  ADInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internal traffic
      VpcId: !Ref ADVPC
      SecurityGroupIngress: []
      Tags: [{ Key: Name, Value: IMS-Prod-AD-SG }]

  # EC2 Instances (1â€“5)
  ADInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref WindowsAmiId
      SubnetId: !Ref ADSubnet1
      SecurityGroupIds: [!Ref ADInstanceSG]
      Tags: [{ Key: Name, Value: AD-Domain-Controller-01 }]

  ADInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref WindowsAmiId
      SubnetId: !Ref ADSubnet2
      SecurityGroupIds: [!Ref ADInstanceSG]
      Tags: [{ Key: Name, Value: AD-Domain-Controller-02 }]

  ADInstance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref WindowsAmiId
      SubnetId: !Ref ADSubnet3
      SecurityGroupIds: [!Ref ADInstanceSG]
      Tags: [{ Key: Name, Value: AD-Domain-Controller-03 }]

  EntraIDActive:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref WindowsAmiId
      SubnetId: !Ref ADSubnet1
      SecurityGroupIds: [!Ref ADInstanceSG]
      Tags: [{ Key: Name, Value: Entra-ID-Connect-Active }]

  EntraIDPassive:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref WindowsAmiId
      SubnetId: !Ref ADSubnet2
      SecurityGroupIds: [!Ref ADInstanceSG]
      Tags: [{ Key: Name, Value: Entra-ID-Connect-Passive }]

Outputs:
  ADVpcID:
    Value: !Ref ADVPC
    Description: Active Directory VPC ID
  ExchangeVpcID:
    Value: !Ref ExchangeVPC
    Description: Exchange Services VPC ID