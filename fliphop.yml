AWSTemplateFormatVersion: '2010-09-09'
Description: DevOps setup with guaranteed UI access

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.50.0.0/16
    Description: VPC CIDR block

  SubnetCIDR:
    Type: String
    Default: 10.50.1.0/24
    Description: Public subnet CIDR

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 SSH key pair

  InstanceType:
    Type: String
    Default: t3.large  # Increased for stability
    AllowedValues: [t3.medium, t3.large, t3.xlarge]
    Description: EC2 instance type

  LatestAmazonLinux2023Ami:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: Latest AL2023 AMI

Resources:
  # --- Networking (Same as before) ---
  DevOpsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: DevOps-VPC

  DevOpsSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DevOpsVPC
      CidrBlock: !Ref SubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DevOps-Subnet

  DevOpsIGW:
    Type: AWS::EC2::InternetGateway

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DevOpsVPC
      InternetGatewayId: !Ref DevOpsIGW

  DevOpsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DevOpsVPC

  DevOpsRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref DevOpsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DevOpsIGW

  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DevOpsSubnet
      RouteTableId: !Ref DevOpsRouteTable

  # --- Security Group with Explicit Ports ---
  DevOpsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DevOps tool access
      VpcId: !Ref DevOpsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 0.0.0.0/0

  # --- Jenkins with Auto-Configuration ---
  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmazonLinux2023Ami
      SubnetId: !Ref DevOpsSubnet
      SecurityGroupIds: [!Ref DevOpsSecurityGroup]
      Tags:
        - Key: Name
          Value: Jenkins
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo dnf update -y
          sudo dnf install -y java-11-amazon-corretto
          sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
          sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
          sudo dnf install -y jenkins
          sudo systemctl enable --now jenkins
          sudo firewall-cmd --add-port=8080/tcp --permanent
          sudo firewall-cmd --reload

  # --- SonarQube with Kernel Tuning ---
  SonarQubeInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmazonLinux2023Ami
      SubnetId: !Ref DevOpsSubnet
      SecurityGroupIds: [!Ref DevOpsSecurityGroup]
      Tags:
        - Key: Name
          Value: SonarQube
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo dnf update -y
          sudo dnf install -y java-11-amazon-corretto wget unzip
          sudo sysctl -w vm.max_map_count=262144
          echo "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.conf
          cd /opt
          sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-10.4.1.88267.zip
          sudo unzip sonarqube-*.zip
          sudo mv sonarqube-* sonarqube
          sudo useradd sonar
          sudo chown -R sonar:sonar /opt/sonarqube
          sudo tee /etc/systemd/system/sonarqube.service > /dev/null <<EOL
          [Unit]
          Description=SonarQube service
          After=syslog.target network.target

          [Service]
          Type=simple
          User=sonar
          ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
          ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOL
          sudo systemctl daemon-reload
          sudo systemctl enable --now sonarqube
          sudo firewall-cmd --add-port=9000/tcp --permanent
          sudo firewall-cmd --reload

  # --- Nexus with Critical Fixes ---
  NexusInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmazonLinux2023Ami
      SubnetId: !Ref DevOpsSubnet
      SecurityGroupIds: [!Ref DevOpsSecurityGroup]
      Tags:
        - Key: Name
          Value: Nexus
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo dnf update -y
          sudo dnf install -y java-11-amazon-corretto wget
          cd /opt
          sudo wget https://download.sonatype.com/nexus/3/latest-unix.tar.gz
          sudo tar -xzf latest-unix.tar.gz
          sudo mv nexus-* nexus
          sudo useradd nexus
          sudo chown -R nexus:nexus /opt/nexus
          echo 'run_as_user="nexus"' | sudo tee /opt/nexus/bin/nexus.rc
          
          # Fix binding to 0.0.0.0
          sudo sed -i 's/# application-host=0.0.0.0/application-host=0.0.0.0/' /opt/nexus/etc/nexus-default.properties
          
          # Systemd service setup
          sudo tee /etc/systemd/system/nexus.service > /dev/null <<EOL
          [Unit]
          Description=Nexus service
          After=network.target

          [Service]
          Type=forking
          User=nexus
          ExecStart=/opt/nexus/bin/nexus start
          ExecStop=/opt/nexus/bin/nexus stop
          Restart=on-abort

          [Install]
          WantedBy=multi-user.target
          EOL
          
          sudo systemctl daemon-reload
          sudo systemctl enable --now nexus
          sudo firewall-cmd --add-port=8081/tcp --permanent
          sudo firewall-cmd --reload

Outputs:
  JenkinsPublicIP:
    Description: Jenkins URL
    Value: !Sub "http://${JenkinsInstance.PublicIp}:8080"
  SonarQubePublicIP:
    Description: SonarQube URL
    Value: !Sub "http://${SonarQubeInstance.PublicIp}:9000"
  NexusPublicIP:
    Description: Nexus URL
    Value: !Sub "http://${NexusInstance.PublicIp}:8081"